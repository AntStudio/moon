<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
      http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd ">

      <!-- 参考文档  http://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/htmlsingle -->
	<!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射 -->
  	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" >
	  	<mvc:argument-resolvers>
	        <bean class="org.moon.core.spring.FormMethodArgumentResolver"/>
	         <bean class="org.moon.core.spring.WebUserArgumentResolver"/>
	    </mvc:argument-resolvers>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper" ref="moonObjectMapper" />
            </bean>
        </mvc:message-converters>
	</mvc:annotation-driven>  
	<!-- 
	    mvc:annotation-driven 
	      3.2 之前              相当于注册了DefaultAnnotationHandlerMapping 和 AnnotationMethodHandlerAdapter两个bean 
	      3.2及之后               相当于注册了RequestMappingHandlerMapping 和 RequestMappingHandlerAdapter两个bean
	-->
	
	<!-- 开启rest 注解 -->
	<bean class="org.moon.rest.handler.RestAnnotationHandler"/>
    <!--开启表创建-->
	<bean class="org.moon.core.init.TableCreator"/>
    <!--初始化菜单、字典、权限-->
	<bean class="org.moon.core.init.Initializer"/>
    <!--开启扫描MenuMapping和PermissionMapping注解处理-->
	<bean class="org.moon.core.init.DomainAnnotationScanner"/>
    <!--默认的权限检测器-->
    <bean class="org.moon.core.auth.DefaultAuthorizationChecker"/>
    <!--异常捕获处理-->
	<bean class="org.moon.core.spring.ExceptionHandler" p:order="-1"/>
    <!--国际化资源-->
    <bean class="org.moon.message.ResourceBundleHolder"/>

    <bean class="org.moon.support.theme.DefaultThemeManager">
        <property name="themes">
            <list>
                <bean class="org.moon.support.theme.Theme">
                    <constructor-arg name="name" value="tab"/>
                    <constructor-arg name="description" value="tab"/>
                    <constructor-arg name="indexPage" value="pages/tab_index"/>
                    <constructor-arg name="themeResources">
                        <list>
                            <bean class="org.moon.support.theme.ThemeResource">
                                <constructor-arg name="type" value="CSS"/>
                                <constructor-arg name="path" value="css/tab_base.css"/>
                            </bean>
                        </list>
                    </constructor-arg>
                    <constructor-arg name="isDefault" value="true"/>
                    <property name="themeHandlePage" value="pages/tab_common"/>
                </bean>

                <bean class="org.moon.support.theme.Theme">
                    <constructor-arg name="name" value="blue"/>
                    <constructor-arg name="description" value="blue"/>
                    <constructor-arg name="indexPage" value="pages/blue_index"/>
                    <constructor-arg name="themeResources">
                        <list>
                            <bean class="org.moon.support.theme.ThemeResource">
                                <constructor-arg name="type" value="CSS"/>
                                <constructor-arg name="path" value="css/blue_base.css"/>
                            </bean>
                        </list>
                    </constructor-arg>
                    <constructor-arg name="isDefault" value="false"/>
                    <property name="themeHandlePage" value="pages/blue_common"/>
                </bean>
            </list>
        </property>
    </bean>

	 <bean id="viewResolver"
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

	<mvc:default-servlet-handler />
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="utf-8" />

    <bean id="moonObjectMapper" class="org.moon.support.json.MoonObjectMapper"/>

    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
        <property name="objectMapper" ref="moonObjectMapper"/>
    </bean>
    <!--用于将sql后缀名请求转到json响应类型-->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes" >
            <value>
                sql=application/json
            </value>
        </property>
    </bean>
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
            </list>
        </property>
    </bean>

    <bean id="introduceCreator" class="com.reeham.component.ddd.autoproxy.IntroduceAutoProxyCreator">
	  <property name="optimize" value="true"/>
	  <property name="frozen" value="true"/>
	</bean>

    <bean id="autoProxyCreator" class="org.moon.core.spring.RbacInterceptorProxyCreator">
        <property name="optimize" value="true"/>
        <property name="frozen" value="true"/>
    </bean>

    <context:load-time-weaver/>
    <cache:annotation-driven cache-manager="cacheManagerDecorator" mode="aspectj"/>

    <!--<bean class="net.rubyeye.xmemcached.auth.AuthInfo" id="authInfo"
          factory-method="plain">
        <constructor-arg index="0">
            <value>root@iz238zkde0vz</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>aaaaaa</value>
        </constructor-arg>
    </bean>
&lt;!&ndash;部署使用&ndash;&gt;
    <bean id="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder">
        &lt;!&ndash; XMemcachedClientBuilder have two arguments.First is server list,and second is weights array. &ndash;&gt;
        <constructor-arg>
            <list>
                <bean class="java.net.InetSocketAddress">
                    <constructor-arg>
                        <value>120.26.39.232</value>
                    </constructor-arg>
                    <constructor-arg>
                        <value>11211</value>
                    </constructor-arg>
                </bean>

            </list>
        </constructor-arg>
        <constructor-arg>
            <list>
                <value>1</value>
            </list>
        </constructor-arg>
        <property name="authInfoMap">
            <map>
                <entry value-ref="authInfo">
                    <key>
                        <bean class="java.net.InetSocketAddress">
                            <constructor-arg>
                                <value>120.26.39.232</value>
                            </constructor-arg>
                            <constructor-arg>
                                <value>11211</value>
                            </constructor-arg>
                        </bean>
                    </key>

                </entry>
            </map>
        </property>

        <property name="connectionPoolSize" value="2"></property>
        <property name="commandFactory">
            &lt;!&ndash; <bean class="net.rubyeye.xmemcached.command.TextCommandFactory"></bean> &ndash;&gt;
            <bean class="net.rubyeye.xmemcached.command.BinaryCommandFactory"></bean>
        </property>
        <property name="sessionLocator">
            <bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"></bean>
        </property>
        <property name="transcoder">
            <bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" />
        </property>
    </bean>


    <bean id="memcachedClient" factory-bean="memcachedClientBuilder"
          factory-method="build" destroy-method="shutdown" />-->

    <bean id="cacheManagerDecorator" class="com.reeham.component.ddd.cache.decorating.ValueProcessingCacheManagerDecorator">
        <property name="cacheManager">
            <!--<bean id="cacheManager" class="org.moon.core.cache.memcached.MemcachedCacheManager">

                <property name="memcachedClient" ref="memcachedClient"></property>
                <property name="cacheSettings">
                    <set>
                        <bean class="org.moon.core.cache.memcached.CacheSetting">
                            <property name="name" value="cache"></property>
                            <property name="expiry" value="3600"></property>
                        </bean>
                        <bean class="org.moon.core.cache.memcached.CacheSetting">
                            <property name="name" value="verifyCodeCache"></property>
                            <property name="expiry" value="1800"></property>
                        </bean>
                    </set>
                </property>
            </bean>-->
            <bean id="cacheManager" class="org.springframework.cache.guava.GuavaCacheManager"/>
        </property>
        <property name="valuePostProcessors">
            <list>
                <bean class="com.reeham.component.ddd.model.cache.ModelAwareValuePostProcessor">
                    <property name="supportedCacheNames">
                        <list>
                            <value>modelCache</value>
                        </list>
                    </property>
                    <property name="recursiveReinject" value ="true"/>
                </bean>
            </list>
        </property>
    </bean>

    <context:annotation-config />

    <!--guavacache 开发使用-->
    <!--<bean id="cacheManager" class="org.springframework.cache.guava.GuavaCacheManager"></bean>-->
<context:component-scan base-package="com.reeham" />
<context:component-scan base-package="org.moon;me.gavincook" use-default-filters="true" >
<context:include-filter type="custom" expression="org.moon.core.spring.DomainTypeFilter"/>
</context:component-scan>


    <!-- the sessionFactory for mybatis -->
    <bean id="sqlSessionFactory" class="org.moon.core.orm.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="/WEB-INF/config/Mybatis-Configuration.xml"/>
        <property name="dataSource" ref="proxoolDataSource" />
        <property name="mapperLocations" value="classpath*:/**/mapper/*Mapper.xml" /><!-- @see http://mybatis.github.io/spring/zh/factorybean.html -->
        <!-- 如果扫描classpath*:/org/**/mapper/*.xml,则会扫描tomcat的catalina.jar下的xml文件，会报错（tomcat 8版本之前无匹配的xml，因此不会报错） -->
    </bean>

    <!-- cacheManager 需要 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="proxoolDataSource" />
        </property>
    </bean>

    <!-- 自动装配mapper @see http://mybatis.github.io/spring/zh/mappers.html -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.moon;me.gavincook" />
        <property name="annotationClass" value="org.springframework.stereotype.Repository" />
    </bean>

    <aop:aspectj-autoproxy />
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 定义事务管理器（声明式的事务） -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="proxoolDataSource" />
    </bean>

</beans>